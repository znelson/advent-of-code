#!/usr/bin/env python

import opcode
import itertools

test_data = [
	'3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0',
	'3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0',
	'3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0',
	'3,8,1001,8,10,8,105,1,0,0,21,38,59,76,89,106,187,268,349,430,99999,3,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,1001,9,5,9,1002,9,5,9,1001,9,2,9,1002,9,3,9,4,9,99,3,9,1001,9,4,9,102,4,9,9,1001,9,3,9,4,9,99,3,9,101,4,9,9,1002,9,5,9,4,9,99,3,9,1002,9,3,9,101,5,9,9,1002,9,3,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,99',
	'3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5'
]

test_sequences = [
	[4, 3, 2, 1, 0],
	[0, 1, 2, 3, 4],
	[1, 0, 4, 3, 2],
	None,
	[9, 8, 7, 6, 5]
]

test_results = [
	43210,
	54321,
	65210,
	199988
]


def parse_tape(data):
	return [int(x) for x in data.split(',')]

def run_amplifiers(data, sequence):
	tape = parse_tape(data)
	signal = 0
	for i in range(len(sequence)):
		inputs = [sequence[i], signal]
		outputs = opcode.run_opcodes(tape, inputs)
		signal = outputs[0]
	return signal

for i in range(3):
	result = run_amplifiers(test_data[i], test_sequences[i])
	print('Test {0} found {1}, expected {2}'.format(i+1, result, test_results[i]))

best_sequence = None
best_result = 0
for sequence in itertools.permutations([0, 1, 2, 3, 4]):
	result = run_amplifiers(test_data[3], sequence)
	if result > best_result:
		best_result = result
		best_sequence = sequence

print('Best result {0} from sequence {1}, expected {2}'.format(best_result, best_sequence, test_results[3]))

#result = run_amplifiers(test_data[4], test_sequences[4])
#print result